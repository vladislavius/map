import requests
from lxml import etree
import json
import re
from requests.auth import HTTPBasicAuth
import hashlib
import os
from datetime import datetime
import sys

def get_file_hash(filename):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        with open(filename, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except FileNotFoundError:
        return None

def parse_yml_to_json(yml_url, username, password):
    """–ü–∞—Ä—Å–∏—Ç YML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ"""
    try:
        auth = HTTPBasicAuth(username, password)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {yml_url}")
        response = requests.get(yml_url, auth=auth, headers=headers, timeout=30)
        response.raise_for_status()
        
        # –ü–∞—Ä—Å–∏–º XML
        root = etree.fromstring(response.content)
        boats = []
        
        for offer_element in root.xpath("//offer"):
            try:
                # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                name_element = offer_element.find("name")
                name = name_element.text if name_element is not None else ""
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
                params = {}
                for param_element in offer_element.xpath("param"):
                    param_name = param_element.get("name")
                    param_value = param_element.text
                    if param_name and param_value:
                        params[param_name] = param_value

                # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                pictures = [pic.text for pic in offer_element.xpath("picture") if pic.text]
                
                # –¶–µ–Ω–∞
                price_element = offer_element.find("price")
                price = float(price_element.text) if price_element is not None else 0.0

                boat_data = {
                    "Boat Name": name,
                    "Pier": params.get("–ü–∏—Ä—Å"),
                    "–¢–∏–ø": params.get("–¢–∏–ø —Å—É–¥–Ω–∞"),
                    "–î–ª–∏–Ω–∞": params.get("–î–ª–∏–Ω–∞"),
                    "–ì–æ–¥": params.get("–ì–æ–¥ —è—Ö—Ç—ã"),
                    "–ú–∞–∫—Å. —á–µ–ª": params.get("–ú–∞–∫—Å.–≥–æ—Å—Ç–µ–π"),
                    "–ö–∞—é—Ç": params.get("–ö–æ–ª-–≤–æ –∫–∞—é—Ç"),
                    "–¶–µ–Ω–∞": price,
                    "–ú–∞—Ä—à—Ä—É—Ç": params.get("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:"),
                    "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ": pictures[0] if pictures else None,
                    "–í—Å–µ —Ñ–æ—Ç–æ": pictures
                }
                
                boats.append(boat_data)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ offer: {e}")
                continue
        
        print(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ –ª–æ–¥–æ–∫: {len(boats)}")
        return json.dumps(boats, indent=2, ensure_ascii=False)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ YML: {e}")
        return None

def main():
    # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    yml_url = os.getenv('YML_URL', 'https://onlysea.travel/tstore/yml/efae0823983b9f9e2c18a3ac98faca65.yml')
    username = os.getenv('YML_USERNAME')
    password = os.getenv('YML_PASSWORD')
    
    if not username or not password:
        print("–û—à–∏–±–∫–∞: YML_USERNAME –∏–ª–∏ YML_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    
    output_file = "boats_data.json"
    
    print(f"üö¢ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à —Ñ–∞–π–ª–∞
    old_hash = get_file_hash(output_file)
    print(f"üìä –¢–µ–∫—É—â–∏–π —Ö–µ—à —Ñ–∞–π–ª–∞: {old_hash}")
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    new_data = parse_yml_to_json(yml_url, username, password)
    
    if new_data is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    temp_file = "boats_data_temp.json"
    with open(temp_file, "w", encoding="utf-8") as f:
        f.write(new_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    new_hash = get_file_hash(temp_file)
    print(f"üÜï –•–µ—à –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {new_hash}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
    if old_hash == new_hash:
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        os.remove(temp_file)
        return False
    else:
        print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è! –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª...")
        os.replace(temp_file, output_file)
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
